openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server 
  - url: https://nba-stats-deploy-nodejs.herokuapp.com/api
    description: Heroku remote server
tags:
- name: "User"
- name: "Team"
- name: "Player"
  name: "News"

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
   
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

    News:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
        image:
          type: string

    Team:
      type: object
      properties:
        name:
          type: string
        full_name:
          type: string
        location:
          type: string
        stadium:
          type: string
        wins:
          type: number
        losses:
          type: number
        logo:
          type: string

    Player:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        team:
          type: string
        position:
          type: string
        height_cm:
          type: number


paths:

  /user/register:
    post:
      tags:
      - "User"
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      tags:
      - "User"
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /teams:
    get:
      tags:
      - "Team"
      summary: Retrieves a list of teams
      description: Retrieves a list of teams as JSON objects.
      responses:
        200:
          description: A list of teams JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
    
    post:
      tags:
      - "Team"
      summary: Create a new Team
      description: Create a new Team
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"

      responses:
        201:
          description: Team created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

  /teams/{id}:
    get:
      tags:
      - "Team"
      summary: Specific Team
      description: Retrieves a specific Team based on it id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A Team in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
        404:
          description: 404 error message player id was not found
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        
   
    put:
      tags:
      - "Team"
      summary: Updates a specific Team
      description: Updates a specific Team based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"

      responses:
        201:
          description: Team updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        404:
          description: Team id succesfully
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

    delete:
      tags:
      - "Team"
      summary: Deletes a specific Team
      description: Deletes a specific Team based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Team deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        404:
          description: 404 error message team id was not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

  /players:
    get:
      tags:
      - "Player"
      summary: Retrieves a list of players
      description: Retrieves a list of players as JSON objects.
      responses:
        200:
          description: A list of players JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
    
    post:
      tags:
      - "Player"
      summary: Create a new Player
      description: Create a new Player
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"

      responses:
        201:
          description: Player created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"

  /players/{id}:
    get:
      tags:
      - "Player"
      summary: Specific Player
      description: Retrieves a specific Player based on it id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A Player in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        404:
          description: 404 error message player id was not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
   
    put:
      tags:
      - "Player"
      summary: Updates a specific Player
      description: Updates a specific Player based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"

      responses:
        201:
          description: Player updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        404:
          description: 404 error message player id was not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

    delete:
      tags:
      - "Player"
      summary: Deletes a specific Player
      description: Deletes a specific Player based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Player deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        404:
          description: 404 error message player id was not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

  /players/team/{team}:
    get:
      tags:
      - "Player"
      summary: Specific team roster
      description: Retrieves a specific team roster based on it id. Team names e.g. Suns, Heat, Lakers, Grizzlies
      parameters:
        - in: path
          name: team
          required: true
          description: Team name
          schema:
            type: string
      responses:
        200:
          description: A Player in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        404:
          description: 404 error message team name was not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string



  /news:
    get:
      tags:
      - "News"
      summary: Retrieves a list of sports news
      description: Retrieves a list of news as JSON objects.
      responses:
        200:
          description: A list of news JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/News"